<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\Event\EventInterface;

/**
 * Cartography Controller
 *
 */
class CartographyController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        $this->Auth->allow();
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
    }


    public function index()
    {

    }

    public function interactiveMap()
    {

    }

    public function downloadData()
    {
        //Recupero los datos de la URL
       // $data_url = $this->request->getQuery();
        //$categoria= $data_url['Categoria'];

      //  $downloadData = $this->paginate($this->Cartography);
       // $this->set(compact('downloadData'));


        //$this->set('categoria', $categoria);
    }

    public function downloadDataIndex()
    {
        //Recupero los datos de la URL
        $data_url = $this->request->getQuery();
        //$categoria= $data_url['Categoria'];

        $downloadData = $this->paginate($this->Cartography);
        $this->set(compact('downloadData'));

        //$this->set('downloadData', $categoria);
    }

    public function downloadDataAdd()
    {
       $downloadData = $this->Cartography->newEntity();

        if ($this->request->is('post')) {
            $downloadData = $this->Cartography->patchEntity($downloadData, $this->request->getData());
            if ($this->Cartography->save($downloadData)) {
                $this->Flash->success(__('El archivo ha sido guardado con Ã©xito.'));

                return $this->redirect(['action' => 'downloadDataIndex']);
            }
            $this->Flash->error(__('El archivo no se ha podido guardar, por favor intente nuevamente.'));
        }
        $this->set(compact('downloadData'));
    }

    public function downloadDataEdit()
    {
        //Recupero los datos de la URL
        $data_url = $this->request->getQuery();
        //$categoria= $data_url['Categoria'];
        $id = $data_url['id'];

        //$downloadData = $this->paginate($this->Cartography);
        //$this->set(compact('downloadData'));

        //$this->set('downloadData', $categoria);

        /*$data_url = $this->request->getQuery();
        $context = $data_url['Context'];
        $categoria= $data_url['Categoria'];
        $id = $data_url['id'];

        $downloadData = $this->Cartography->get($id, [
            'contain' => []
        ]);

        $this->set('downloadData', $downloadData);

        $data_url = $this->request->getQuery();
        $context = $data_url['Context'];
        $categoria= $data_url['Categoria'];
        $id = $data_url['id'];*/


        $downloadData = $this->Cartography->get($id, [
            'contain' => [],
        ]);


        if ($this->request->is(['patch', 'post', 'put'])) {
            $downloadData = $this->Cartography->patchEntity($downloadData, $this->request->getData());
            if ($this->Cartography->save($downloadData)) {
                $this->Flash->success(__('The tipo intere has been saved.'));

                return $this->redirect(['action' => 'downloadDataIndex']);
            }
            $this->Flash->error(__('The puntos intere could not be saved. Please, try again.'));
        }
        $this->set(compact('downloadData'));
    }

    public function getDataByLocalidadIdAll()
    {

        $this->autoRender = false;

        $localidades = null;

        //comprobacion de definicion de variable
        if(isset($_POST['localidades']))
        {
            $localidades = $_POST['localidades'];
        }



        if($this->request->is('ajax')) {

            //compruebo que el array no este vacio
            if(count($localidades) > 0)
            {
                //Recorro el arreglo de localidades
                $array_or = [];

                foreach ($localidades as $loc){

                    array_push($array_or, $loc['fid']);
                }

                //model localidades
                $localidades_model = $this->loadModel('Localidades');
                $localidades_data = $localidades_model->find('all',
                    []
                )->where(['id_loc_icon IN ' => $array_or])
                    ->toArray();

                return $this->json($localidades_data);
            }
        }

        return null;
    }


    public function getDataLocalidadById()
    {
        $id = $_POST['id'];

        //model localidades
        $localidades_model = $this->loadModel('Localidades');

        if($this->request->is('ajax')) {

            $localidades_data = $localidades_model->find('all', [])
                ->where(['id_loc_icon' => $id])->toArray();


            return $this->json($localidades_data);
        }


        return false;
    }

    public function getDataPOIById()
    {
        $id = $_POST['id'];
        $id_loc = $_POST['id_loc'];

        //model localidades
        $puntosdeinteres_model = $this->loadModel('PuntosInteres');

        if($this->request->is('ajax')) {

            $puntos_interes_data = $puntosdeinteres_model->find('all', [])
                ->where(['id_punto' => $id, 'localidad' => $id_loc])->toArray();


            return $this->json($puntos_interes_data);
        }


        return false;
    }

    public function getDataPOI()
    {
        $id = $_POST['id'];

        //model localidades
        $puntosdeinteres_model = $this->loadModel('PuntosInteres');

        if($this->request->is('ajax')) {

            $puntos_interes_data = $puntosdeinteres_model->find('all', [
                'contain' => ['Categorias', 'Tipo', 'Subtipo']
            ])
                ->where(['localidad' => $id])->toArray();


            return $this->json($puntos_interes_data);
        }


        return false;
    }


}
